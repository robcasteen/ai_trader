import json
from pathlib import Path
from datetime import datetime

PROJECT_ROOT = Path(__file__).resolve().parents[2]
LOGS_DIR = PROJECT_ROOT / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)
TRADES_FILE = LOGS_DIR / "trades.json"


class PaperTrader:
    def __init__(self):
        self.trades_file = TRADES_FILE
        if not self.trades_file.exists():
            with open(self.trades_file, "w") as f:
                json.dump([], f)

    def execute_trade(self, symbol, action, price, balance, reason, amount=0.01):
        """
        Simulate a trade with Kraken fees.
        - Taker fee: 0.26%
        """
        # Calculate gross value
        gross_value = amount * price
        
        # Apply 0.26% taker fee
        fee_rate = 0.0026
        fee = gross_value * fee_rate
        net_value = gross_value - fee if action == "buy" else gross_value + fee
        
        trade = {
            "timestamp": datetime.now().isoformat(),
            "action": action,
            "symbol": symbol,
            "price": price,
            "amount": amount,
            "gross_value": round(gross_value, 2),
            "fee": round(fee, 2),
            "net_value": round(net_value, 2),
            "reason": reason,
            "value": round(net_value, 2),  # Keep for backwards compatibility
        }

        # Load existing trades
        trades = []
        if self.trades_file.exists():
            with open(self.trades_file, "r") as f:
                try:
                    trades = json.load(f)
                except json.JSONDecodeError:
                    trades = []

        # Append new trade
        trades.append(trade)

        # Write back
        with open(self.trades_file, "w") as f:
            json.dump(trades, f, indent=2)

        return trade
