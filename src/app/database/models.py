"""
SQLAlchemy Database Models for Kraken AI Trading Bot

Clean, resilient, performative data layer with test isolation.
"""
from datetime import datetime
from decimal import Decimal
from typing import Optional
from sqlalchemy import (
    Column, Integer, String, Numeric, Boolean,
    DateTime, ForeignKey, Index, JSON, Text, create_engine
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

# Use Numeric for decimal fields (SQLite compatible)
SQLDecimal = Numeric

Base = declarative_base()


class Signal(Base):
    """Trading signals generated by strategies."""
    __tablename__ = "signals"

    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    price = Column(SQLDecimal(20, 8), nullable=False)

    # Signal decision
    final_signal = Column(String(10), nullable=False, index=True)  # BUY, SELL, HOLD
    final_confidence = Column(SQLDecimal(5, 4), nullable=False)
    aggregation_method = Column(String(50), nullable=False)

    # Strategy breakdown (JSON for flexibility)
    strategies = Column(JSON, nullable=False)

    # Provenance & Testing
    test_mode = Column(Boolean, nullable=False, default=False, index=True)
    bot_version = Column(String(20), default="1.0.0")
    strategy_version = Column(String(64))  # Hash of strategy configs

    # Metadata
    signal_metadata = Column(JSON)  # Renamed from 'metadata' (reserved word)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    trades = relationship("Trade", back_populates="signal")

    # Composite indexes
    __table_args__ = (
        Index('idx_signal_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_test_signal_timestamp', 'test_mode', 'final_signal', 'timestamp'),
    )

    def __repr__(self):
        return f"<Signal(id={self.id}, symbol={self.symbol}, signal={self.final_signal}, conf={self.final_confidence})>"


class Trade(Base):
    """Executed trades."""
    __tablename__ = "trades"

    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    action = Column(String(10), nullable=False)  # buy, sell
    symbol = Column(String(20), nullable=False, index=True)

    # Financial details
    price = Column(SQLDecimal(20, 8), nullable=False)
    amount = Column(SQLDecimal(20, 8), nullable=False)
    gross_value = Column(SQLDecimal(20, 8), nullable=False)
    fee = Column(SQLDecimal(20, 8), nullable=False, default=0)
    net_value = Column(SQLDecimal(20, 8), nullable=False)

    # Attribution
    signal_id = Column(Integer, ForeignKey('signals.id'), index=True)
    strategies_used = Column(JSON)  # ["sentiment", "technical"]

    # Provenance & Testing
    test_mode = Column(Boolean, nullable=False, default=False, index=True)
    bot_version = Column(String(20), default="1.0.0")

    # Context
    reason = Column(Text)
    balance_before = Column(SQLDecimal(20, 2))
    balance_after = Column(SQLDecimal(20, 2))

    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    signal = relationship("Signal", back_populates="trades")

    # Composite indexes
    __table_args__ = (
        Index('idx_trade_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_trade_test_timestamp', 'test_mode', 'timestamp'),
    )

    def __repr__(self):
        return f"<Trade(id={self.id}, {self.action} {self.amount} {self.symbol} @ {self.price})>"


class Holding(Base):
    """Current positions (point-in-time snapshots)."""
    __tablename__ = "holdings"

    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    symbol = Column(String(20), nullable=False, index=True)
    amount = Column(SQLDecimal(20, 8), nullable=False)
    avg_buy_price = Column(SQLDecimal(20, 8), nullable=False)
    current_price = Column(SQLDecimal(20, 8))
    unrealized_pnl = Column(SQLDecimal(20, 2))

    # Attribution
    entry_signal_id = Column(Integer, ForeignKey('signals.id'))
    entry_trade_id = Column(Integer, ForeignKey('trades.id'))

    test_mode = Column(Boolean, nullable=False, default=False, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)

    __table_args__ = (
        Index('idx_symbol_test', 'symbol', 'test_mode'),
    )

    def __repr__(self):
        return f"<Holding(symbol={self.symbol}, amount={self.amount}, pnl={self.unrealized_pnl})>"


class StrategyPerformance(Base):
    """Aggregated performance metrics by strategy."""
    __tablename__ = "strategy_performance"

    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_name = Column(String(50), nullable=False, index=True)
    period_start = Column(DateTime, nullable=False)
    period_end = Column(DateTime, nullable=False)

    # Signal metrics
    signals_generated = Column(Integer, default=0)
    signals_executed = Column(Integer, default=0)
    execution_rate = Column(SQLDecimal(5, 4))

    # Trade metrics
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate = Column(SQLDecimal(5, 4))

    # Financial metrics
    total_pnl = Column(SQLDecimal(20, 2), default=0)
    avg_pnl_per_trade = Column(SQLDecimal(20, 2))
    max_drawdown = Column(SQLDecimal(20, 2))

    # Configuration snapshot
    strategy_config = Column(JSON)

    test_mode = Column(Boolean, nullable=False, default=False, index=True)
    calculated_at = Column(DateTime, default=datetime.utcnow)

    __table_args__ = (
        Index('idx_strategy_period', 'strategy_name', 'period_start'),
    )

    def __repr__(self):
        return f"<StrategyPerformance(strategy={self.strategy_name}, win_rate={self.win_rate})>"


class StrategyDefinition(Base):
    """Dynamic strategy configurations."""
    __tablename__ = "strategy_definitions"

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(50), nullable=False, unique=True, index=True)
    version = Column(String(20), nullable=False)

    # Configuration
    enabled = Column(Boolean, nullable=False, default=True, index=True)
    weight = Column(SQLDecimal(5, 2), nullable=False, default=1.0)
    parameters = Column(JSON)  # Strategy-specific params

    # Code reference
    class_name = Column(String(100))
    module_path = Column(String(200))

    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = Column(String(50), default="system")

    # Validation
    min_confidence = Column(SQLDecimal(5, 4))
    max_position_size = Column(SQLDecimal(20, 8))

    # A/B Testing
    ab_test_group = Column(String(20))

    __table_args__ = (
        Index('idx_name_version', 'name', 'version'),
    )

    def __repr__(self):
        return f"<StrategyDefinition(name={self.name}, v={self.version}, enabled={self.enabled})>"


class ErrorLog(Base):
    """Structured error logging."""
    __tablename__ = "error_logs"

    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    level = Column(String(20), nullable=False, index=True)  # ERROR, WARNING, CRITICAL
    component = Column(String(50), nullable=False, index=True)
    error_type = Column(String(50))
    message = Column(Text, nullable=False)

    # Context
    stack_trace = Column(Text)
    context = Column(JSON)
    symbol = Column(String(20))

    # Resolution
    resolved = Column(Boolean, default=False, index=True)
    resolved_at = Column(DateTime)
    resolution_notes = Column(Text)

    test_mode = Column(Boolean, nullable=False, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    __table_args__ = (
        Index('idx_level_resolved', 'level', 'resolved'),
    )

    def __repr__(self):
        return f"<ErrorLog(id={self.id}, level={self.level}, component={self.component})>"


class RSSFeed(Base):
    """News feed configurations."""
    __tablename__ = "rss_feeds"

    id = Column(Integer, primary_key=True, autoincrement=True)
    url = Column(String(500), nullable=False, unique=True, index=True)
    name = Column(String(100), nullable=False)
    enabled = Column(Boolean, nullable=False, default=True, index=True)
    keywords = Column(JSON)  # List of keywords to match

    # Stats
    last_fetched = Column(DateTime)
    last_fetch = Column(DateTime)  # Alias for compatibility
    total_items_fetched = Column(Integer, default=0)
    error_count = Column(Integer, default=0)
    last_error = Column(Text)  # Last error message

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __repr__(self):
        return f"<RSSFeed(name={self.name}, enabled={self.enabled})>"


class SeenNews(Base):
    """Deduplication tracking for news items."""
    __tablename__ = "seen_news"

    id = Column(Integer, primary_key=True, autoincrement=True)
    headline = Column(String(500), nullable=False, index=True)
    url = Column(String(500), unique=True, index=True)
    feed_id = Column(Integer, ForeignKey('rss_feeds.id'))
    seen_at = Column(DateTime, nullable=False, index=True)

    # Sentiment analysis
    sentiment_score = Column(SQLDecimal(5, 4))
    keywords_matched = Column(JSON)
    triggered_signal = Column(Boolean, default=False)
    signal_id = Column(Integer, ForeignKey('signals.id'))

    created_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f"<SeenNews(headline={self.headline[:50]}...)>"


class BotStatus(Base):
    """Bot runtime status and configuration."""
    __tablename__ = "bot_status"

    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime, nullable=False, index=True)

    # Status
    is_running = Column(Boolean, default=False)
    mode = Column(String(20))  # "paper", "live"

    # Metrics
    total_trades = Column(Integer, default=0)
    total_signals = Column(Integer, default=0)
    balance = Column(SQLDecimal(20, 2))
    total_pnl = Column(SQLDecimal(20, 2))

    # Configuration
    min_confidence = Column(SQLDecimal(5, 4))
    position_size = Column(SQLDecimal(20, 2))

    # Metadata
    bot_version = Column(String(20))
    last_trade_at = Column(DateTime)
    last_signal_at = Column(DateTime)

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __repr__(self):
        return f"<BotStatus(running={self.is_running}, mode={self.mode}, balance={self.balance})>"
