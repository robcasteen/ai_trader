<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Trading Terminal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: #000000;
            color: #00ff00;
            font-size: 11px;
            line-height: 1.2;
            overflow: hidden;
        }

        .terminal-header {
            background: #0a0a0a;
            border-bottom: 1px solid #00ff00;
            padding: 4px 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 28px;
        }

        .terminal-title {
            color: #00ff00;
            font-weight: bold;
            font-size: 12px;
            letter-spacing: 2px;
        }

        .terminal-time {
            color: #ffaa00;
            font-size: 11px;
        }

        .status-bar {
            display: flex;
            gap: 15px;
            font-size: 10px;
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .status-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #00ff00;
            animation: pulse 2s infinite;
        }

        .status-dot.red {
            background: #ff0000;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.4; }
        }

        .nav-tabs {
            background: #0a0a0a;
            border-bottom: 1px solid #333;
            display: flex;
            padding: 0 8px;
            height: 22px;
        }

        .nav-tab {
            padding: 2px 12px;
            cursor: pointer;
            border-right: 1px solid #333;
            color: #666;
            font-size: 10px;
            transition: all 0.1s;
            display: flex;
            align-items: center;
        }

        .nav-tab:hover {
            background: #1a1a1a;
            color: #00ff00;
        }

        .nav-tab.active {
            background: #1a1a1a;
            color: #00ff00;
            border-bottom: 2px solid #00ff00;
        }

        .content-area {
            height: calc(100vh - 50px);
            overflow-y: auto;
            padding: 8px;
        }

        .content-area::-webkit-scrollbar {
            width: 4px;
        }

        .content-area::-webkit-scrollbar-track {
            background: #0a0a0a;
        }

        .content-area::-webkit-scrollbar-thumb {
            background: #333;
        }

        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-bottom: 8px;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-bottom: 8px;
        }

        .terminal-panel {
            background: #0a0a0a;
            border: 1px solid #1a4d1a;
            padding: 6px;
            margin-bottom: 8px;
        }

        .panel-header {
            color: #ffaa00;
            font-size: 10px;
            font-weight: bold;
            margin-bottom: 4px;
            padding-bottom: 2px;
            border-bottom: 1px solid #1a4d1a;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .panel-content {
            font-size: 10px;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            padding: 2px 0;
            font-size: 10px;
        }

        .metric-label {
            color: #666;
        }

        .metric-value {
            color: #00ff00;
            font-weight: bold;
        }

        .positive {
            color: #00ff00;
        }

        .negative {
            color: #ff0000;
        }

        .neutral {
            color: #ffaa00;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 10px;
        }

        .data-table th {
            background: #0d0d0d;
            color: #ffaa00;
            text-align: left;
            padding: 3px 6px;
            border-bottom: 1px solid #1a4d1a;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 9px;
            letter-spacing: 0.5px;
        }

        .data-table td {
            padding: 2px 6px;
            border-bottom: 1px solid #0d0d0d;
        }

        .data-table tr:hover {
            background: #0f0f0f;
        }

        .signal-badge {
            display: inline-block;
            padding: 1px 6px;
            font-size: 9px;
            font-weight: bold;
            border-radius: 2px;
            min-width: 35px;
            text-align: center;
        }

        .signal-buy {
            background: #003300;
            color: #00ff00;
            border: 1px solid #00ff00;
        }

        .signal-sell {
            background: #330000;
            color: #ff0000;
            border: 1px solid #ff0000;
        }

        .signal-hold {
            background: #332200;
            color: #ffaa00;
            border: 1px solid #ffaa00;
        }

        .btn {
            background: #0d0d0d;
            border: 1px solid #00ff00;
            color: #00ff00;
            padding: 4px 12px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-size: 10px;
            transition: all 0.1s;
            text-transform: uppercase;
            letter-spacing: 1px;
            width: 100%;
        }

        .btn:hover {
            background: #00ff00;
            color: #000;
        }

        .btn:active {
            transform: scale(0.98);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .timestamp {
            color: #666;
            font-size: 9px;
        }

        .price {
            font-family: 'Courier New', monospace;
            letter-spacing: -0.5px;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .compact {
            line-height: 1.1;
        }

        .loading {
            color: #ffaa00;
            text-align: center;
            padding: 20px;
        }

        .feed-item {
            padding: 3px 0;
            border-bottom: 1px solid #0d0d0d;
            font-size: 10px;
        }

        .feed-time {
            color: #666;
            font-size: 9px;
            margin-right: 8px;
        }

        .feed-source {
            color: #ffaa00;
            margin-right: 8px;
        }

        .feed-text {
            color: #00ff00;
        }

        .health-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 4px;
        }

        .health-item {
            background: #0d0d0d;
            padding: 4px;
            border: 1px solid #1a4d1a;
            text-align: center;
        }

        .health-label {
            font-size: 8px;
            color: #666;
            text-transform: uppercase;
        }

        .health-value {
            font-size: 11px;
            font-weight: bold;
            margin: 2px 0;
        }

        .health-status {
            font-size: 8px;
        }
    </style>
</head>
<body>
    <div class="terminal-header">
        <div class="terminal-title">◢ AI TRADING TERMINAL v1.0</div>
        <div class="status-bar">
            <div class="status-item">
                <div class="status-dot" id="status-dot"></div>
                <span id="status-text">LIVE</span>
            </div>
            <div class="status-item">
                <span id="kraken-status">KRAKEN</span>
            </div>
            <div class="status-item">
                <span id="gpt-status">GPT-4</span>
            </div>
            <div class="status-item terminal-time" id="clock">--:--:--</div>
        </div>
    </div>

    <div class="nav-tabs">
        <div class="nav-tab active" onclick="switchTab('overview')">OVERVIEW</div>
        <div class="nav-tab" onclick="switchTab('trades')">TRADES</div>
        <div class="nav-tab" onclick="switchTab('strategies')">STRATEGIES</div>
        <div class="nav-tab" onclick="switchTab('feeds')">FEEDS</div>
        <div class="nav-tab" onclick="switchTab('health')">HEALTH</div>
    </div>

    <div class="content-area">
        <!-- Overview Tab -->
        <div id="overview" class="tab-content active">
            <div class="grid-3">
                <div class="terminal-panel">
                    <div class="panel-header">Portfolio</div>
                    <div class="panel-content">
                        <div class="metric">
                            <span class="metric-label">BALANCE</span>
                            <span class="metric-value price" id="balance">$--</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">P&L TODAY</span>
                            <span class="metric-value price" id="pnl-today">$--</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">TOTAL TRADES</span>
                            <span class="metric-value" id="total-trades">--</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">WIN RATE</span>
                            <span class="metric-value" id="win-rate">--%</span>
                        </div>
                    </div>
                </div>

                <div class="terminal-panel">
                    <div class="panel-header">System Status</div>
                    <div class="panel-content">
                        <div class="metric">
                            <span class="metric-label">LAST RUN</span>
                            <span class="metric-value timestamp" id="last-run">--</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">NEXT RUN</span>
                            <span class="metric-value timestamp" id="next-run">--</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">MESSAGE</span>
                            <span class="metric-value" id="status-msg" style="font-size: 9px;">--</span>
                        </div>
                    </div>
                </div>

                <div class="terminal-panel">
                    <div class="panel-header">Actions</div>
                    <div class="panel-content" style="display: flex; flex-direction: column; gap: 4px;">
                        <button class="btn" id="run-now-btn" onclick="runNow()">▶ RUN NOW</button>
                        <button class="btn" onclick="refreshData()">↻ REFRESH</button>
                    </div>
                </div>
            </div>

            <div class="grid-2">
                <div class="terminal-panel">
                    <div class="panel-header">Recent Signals (<span id="signal-count">0</span>)</div>
                    <div class="panel-content compact">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>TIME</th>
                                    <th>SYMBOL</th>
                                    <th>SIGNAL</th>
                                    <th>PRICE</th>
                                </tr>
                            </thead>
                            <tbody id="recent-signals">
                                <tr><td colspan="4" class="loading">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="terminal-panel">
                    <div class="panel-header">Recent Trades (<span id="trade-count">0</span>)</div>
                    <div class="panel-content compact">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>TIME</th>
                                    <th>SYMBOL</th>
                                    <th>ACTION</th>
                                    <th>PRICE</th>
                                </tr>
                            </thead>
                            <tbody id="recent-trades">
                                <tr><td colspan="4" class="loading">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Trades Tab -->
        <div id="trades" class="tab-content">
            <div class="terminal-panel">
                <div class="panel-header">All Trades (<span id="all-trade-count">0</span>)</div>
                <div class="panel-content">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>TIMESTAMP</th>
                                <th>SYMBOL</th>
                                <th>ACTION</th>
                                <th>PRICE</th>
                                <th>AMOUNT</th>
                                <th>VALUE</th>
                                <th>REASON</th>
                            </tr>
                        </thead>
                        <tbody id="all-trades">
                            <tr><td colspan="7" class="loading">Loading...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Strategies Tab -->
        <div id="strategies" class="tab-content">
            <div class="terminal-panel">
                <div class="panel-header">Strategy Signals (<span id="strategy-signal-count">0</span>)</div>
                <div class="panel-content">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>TIME</th>
                                <th>SYMBOL</th>
                                <th>STRATEGY</th>
                                <th>SIGNAL</th>
                                <th>CONF</th>
                                <th>PRICE</th>
                                <th>REASONING</th>
                            </tr>
                        </thead>
                        <tbody id="strategy-signals">
                            <tr><td colspan="7" class="loading">Loading...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Feeds Tab -->
        <div id="feeds" class="tab-content">
            <div class="terminal-panel">
                <div class="panel-header">RSS Feeds (<span id="feed-count">0</span> Active)</div>
                <div class="panel-content">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>SOURCE</th>
                                <th>STATUS</th>
                                <th>URL</th>
                            </tr>
                        </thead>
                        <tbody id="feed-list">
                            <tr><td colspan="3" class="loading">Loading...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Health Tab -->
        <div id="health" class="tab-content">
            <div class="health-grid" id="health-grid">
                <div class="health-item">
                    <div class="health-label">Loading...</div>
                    <div class="health-value">●</div>
                    <div class="health-status">--</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Update clock
        function updateClock() {
            const now = new Date();
            document.getElementById('clock').textContent = now.toTimeString().split(' ')[0];
        }
        setInterval(updateClock, 1000);
        updateClock();

        // Tab switching
        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.nav-tab').forEach(navTab => navTab.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // Format price
        function formatPrice(price) {
            return '$' + parseFloat(price).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        // Format timestamp
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toTimeString().split(' ')[0].substring(0, 5);
        }

        // Load portfolio data
        async function loadPortfolio() {
            try {
                const response = await fetch('/partial');
                const data = await response.json();
                
                const summary = data.summary || {};
                document.getElementById('balance').textContent = formatPrice(summary.current_balance || 0);
                document.getElementById('pnl-today').textContent = formatPrice(summary.pnl || 0);
                document.getElementById('pnl-today').className = 'metric-value price ' + (summary.pnl >= 0 ? 'positive' : 'negative');
                document.getElementById('total-trades').textContent = summary.total_trades || 0;
                document.getElementById('win-rate').textContent = (summary.win_rate || 0) + '%';
                
                // Load recent trades
                const trades = data.recent_trades || [];
                document.getElementById('trade-count').textContent = trades.length;
                const tradesHtml = trades.slice(0, 5).map(trade => `
                    <tr>
                        <td class="timestamp">${formatTime(trade.timestamp)}</td>
                        <td>${trade.symbol}</td>
                        <td><span class="signal-badge signal-${trade.action.toLowerCase()}">${trade.action}</span></td>
                        <td class="price">${formatPrice(trade.price)}</td>
                    </tr>
                `).join('');
                document.getElementById('recent-trades').innerHTML = tradesHtml || '<tr><td colspan="4">No trades yet</td></tr>';
                
                // All trades tab
                document.getElementById('all-trade-count').textContent = trades.length;
                const allTradesHtml = trades.map(trade => `
                    <tr>
                        <td class="timestamp">${trade.timestamp}</td>
                        <td>${trade.symbol}</td>
                        <td><span class="signal-badge signal-${trade.action.toLowerCase()}">${trade.action}</span></td>
                        <td class="price">${formatPrice(trade.price)}</td>
                        <td>${trade.amount || 0.01}</td>
                        <td class="price">${formatPrice(trade.value || 0)}</td>
                        <td style="font-size: 9px; max-width: 200px; overflow: hidden; text-overflow: ellipsis;">${trade.reason || ''}</td>
                    </tr>
                `).join('');
                document.getElementById('all-trades').innerHTML = allTradesHtml || '<tr><td colspan="7">No trades yet</td></tr>';
            } catch (error) {
                console.error('Error loading portfolio:', error);
            }
        }

        // Load strategy signals
        async function loadStrategies() {
            try {
                const response = await fetch('/api/strategy/current');
                const data = await response.json();
                
                const signals = data.signals || [];
                document.getElementById('signal-count').textContent = signals.length;
                document.getElementById('strategy-signal-count').textContent = signals.length;
                
                // Recent signals (overview tab)
                const recentHtml = signals.slice(0, 5).map(sig => `
                    <tr>
                        <td class="timestamp">${formatTime(sig.timestamp)}</td>
                        <td>${sig.symbol}</td>
                        <td><span class="signal-badge signal-${sig.final_signal.toLowerCase()}">${sig.final_signal}</span></td>
                        <td class="price">${formatPrice(sig.price)}</td>
                    </tr>
                `).join('');
                document.getElementById('recent-signals').innerHTML = recentHtml || '<tr><td colspan="4">No signals yet</td></tr>';
                
                // All signals (strategies tab)
                const allSignalsHtml = signals.map(sig => `
                    <tr>
                        <td class="timestamp">${formatTime(sig.timestamp)}</td>
                        <td>${sig.symbol}</td>
                        <td>${Object.keys(sig.strategies || {})[0] || "N/A"}</td>
                        <td><span class="signal-badge signal-${sig.final_signal.toLowerCase()}">${sig.final_signal}</span></td>
                        <td>${Math.round((sig.confidence || 0) * 100)}%</td>
                        <td class="price">${formatPrice(sig.price)}</td>
                        <td style="font-size: 9px; max-width: 250px; overflow: hidden; text-overflow: ellipsis;">${Object.values(sig.strategies || {})[0]?.reason || ''}</td>
                    </tr>
                `).join('');
                document.getElementById('strategy-signals').innerHTML = allSignalsHtml || '<tr><td colspan="7">No signals yet</td></tr>';
            } catch (error) {
                console.error('Error loading strategies:', error);
            }
        }

        // Load status
        async function loadStatus() {
            try {
                const response = await fetch('/status');
                const data = await response.json();
                
                const status = data.last_status || {};
                document.getElementById('last-run').textContent = status.time ? new Date(status.time).toTimeString().split(' ')[0] : '--';
                document.getElementById('next-run').textContent = status.next_run || '--';
                document.getElementById('status-msg').textContent = status.message || '--';
            } catch (error) {
                console.error('Error loading status:', error);
            }
        }

        // Load feeds
        async function loadFeeds() {
            try {
                const response = await fetch('/api/feeds');
                const data = await response.json();
                
                const feeds = data.feeds || [];
                document.getElementById('feed-count').textContent = feeds.length;
                
                const feedsHtml = feeds.map(feed => `
                    <tr>
                        <td>${feed.name}</td>
                        <td><span class="positive">●</span> ACTIVE</td>
                        <td style="font-size: 9px; max-width: 400px; overflow: hidden; text-overflow: ellipsis;">${feed.url}</td>
                    </tr>
                `).join('');
                document.getElementById('feed-list').innerHTML = feedsHtml || '<tr><td colspan="3">No feeds configured</td></tr>';
            } catch (error) {
                console.error('Error loading feeds:', error);
            }
        }

        // Load health
        async function loadHealth() {
            try {
                const response = await fetch('/api/health');
                const data = await response.json();
                
                const services = [
                    { name: 'OpenAI API', key: 'openai', status: data.openai },
                    { name: 'Kraken API', key: 'kraken', status: data.kraken },
                    { name: 'RSS Feeds', key: 'rss', status: data.rss },
                    { name: 'Database', key: 'database', status: data.database }
                ];
                
                const healthHtml = services.map(svc => `
                    <div class="health-item">
                        <div class="health-label">${svc.name}</div>
                        <div class="health-value ${svc.status?.status === 'connected' ? 'positive' : 'negative'}">●</div>
                        <div class="health-status">${svc.status?.status || '--'}</div>
                    </div>
                `).join('');
                document.getElementById('health-grid').innerHTML = healthHtml;
                
                // Update header status
                const allOk = services.every(s => s.status?.status === 'operational');
                document.getElementById('status-dot').className = 'status-dot ' + (allOk ? '' : 'red');
                document.getElementById('status-text').textContent = allOk ? 'LIVE' : 'ERROR';
            } catch (error) {
                console.error('Error loading health:', error);
            }
        }

        // Run now
        async function runNow() {
            const btn = document.getElementById('run-now-btn');
            btn.disabled = true;
            btn.textContent = '⏳ RUNNING...';
            
            try {
                const response = await fetch('/run-now');
                const data = await response.json();
                
                if (data.status === 'ok') {
                    btn.textContent = '✓ COMPLETE';
                    setTimeout(() => {
                        btn.textContent = '▶ RUN NOW';
                        btn.disabled = false;
                        refreshData();
                    }, 2000);
                }
            } catch (error) {
                console.error('Error running cycle:', error);
                btn.textContent = '✗ ERROR';
                setTimeout(() => {
                    btn.textContent = '▶ RUN NOW';
                    btn.disabled = false;
                }, 2000);
            }
        }

        // Refresh all data
        function refreshData() {
            loadPortfolio();
            loadStrategies();
            loadStatus();
            loadFeeds();
            loadHealth();
        }

        // Initial load
        refreshData();
        
        // Auto-refresh every 10 seconds
        setInterval(refreshData, 10000);
    </script>
</body>
</html>